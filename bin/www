#!/usr/bin/env node
const cluster = require('cluster');
const {getLocalIps, getHostname, debug, buildCliArgs} = require('../utils');
async function serverBuilder(cliArgs){
  const https = require('https');
  const fs = require('fs-promise');
  const path = require('path');

  const appBuilder = require('../app');
  // Get Ip address for the https certs sub directory.
  const ips = [getHostname(), ...getLocalIps()];
  if (cliArgs.certName) {
    ips.unshift(cliArgs.certName);
  }
  const certDirName = (await fs.readdir(path.resolve(__dirname, '../certs'))).find(filename => ips.includes(filename));
  const [key, cert] = await Promise.all([
    fs.readFile(path.resolve(__dirname, `../certs/${certDirName}/server.key`)),
    fs.readFile(path.resolve(__dirname, `../certs/${certDirName}/server.crt`))
  ]);
  const log = debug('server');
  // Create HTTP server.
  const server = https.createServer({key, cert}, appBuilder(cliArgs));
  return server.on('listening', () => { // Event listener for HTTP server "listening" event.
    const addr = server.address();
    const bind = typeof addr === 'string' ? `pipe ${addr}` : `host https://${certDirName}:${addr.port}`;
    log(`Listening on ${bind}`);
  }).on('error', (error) => { // Event listener for HTTP server "error" event.
    if (error.syscall !== 'listen') {
      throw error;
    }
    const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
    // handle specific listen errors with friendly messages
    switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
    }
  });
};
if (cluster.isMaster) {
  const cliArgs = buildCliArgs();
  serverBuilder(cliArgs).then(server => server.listen(cliArgs.port));
}
module.exports = serverBuilder;
